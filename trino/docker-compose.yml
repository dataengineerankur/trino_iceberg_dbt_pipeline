version: '3.7'
services:
  trino:
    build: .  # Use the Dockerfile in the current directory
    image: trinodb/trino:395
    container_name: trino
    ports:
      - "8080:8080"
    environment:
      - JAVA_OPTS=-Djava.library.path=/usr/lib/trino/lib -Dfs.s3a.access.key=minioadmin -Dfs.s3a.secret.key=minioadmin -Dfs.s3a.endpoint=http://minio:9000 -Dfs.s3a.path.style.access=true -Dfs.s3a.connection.ssl.enabled=false
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - S3A_ACCESS_KEY=minioadmin
      - S3A_SECRET_KEY=minioadmin
    volumes:
      - ./catalog/kafka.properties:/etc/trino/catalog/kafka.properties
      - ./catalog/iceberg.properties:/etc/trino/catalog/iceberg.properties
      - ./catalog/hive.properties:/etc/trino/catalog/hive.properties
      - ./config.properties:/etc/trino/config.properties
      - ./node.properties:/etc/trino/node.properties
      - ./etc/kafka:/etc/trino/etc/kafka
      - ./core-site.xml:/etc/hadoop/conf/core-site.xml
    depends_on:
      - zookeeper
      - kafka
      - hive-metastore
      - minio

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
  
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hive
      - POSTGRES_DB=metastore
    volumes:
      - postgres-data:/var/lib/postgresql/data
  
  hive-metastore:
    image: bitsondatadev/hive-metastore:latest
    container_name: hive-metastore
    ports:
      - "9083:9083"
    environment:
      - DB_DRIVER=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=metastore
      - DB_USER=hive
      - DB_PASSWORD=hive
      - METASTORE_WAREHOUSE_DIR=/opt/warehouse
    volumes:
      - warehouse-data:/opt/warehouse
    depends_on:
      - postgres
      
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      
  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic events_topic --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

volumes:
  warehouse-data:
  postgres-data:
  minio-data:

networks:
  default:
    driver: bridge